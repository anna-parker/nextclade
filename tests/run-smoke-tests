#!/usr/bin/env bash
set -euo pipefail -o errtrace
trap "exit 0" INT

# Runs smoke tests - basic use-case checks with default data
# https://en.wikipedia.org/wiki/Smoke_testing_(software)
#
# Dependencies:
#   sudo apt-get install -y bash curl parallel
#
#   curl -fsSL "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64" -o ${HOME}/bin/jq && chmod +x ${HOME}/bin/jq
#
#   curl -sSL "https://github.com/shenwei356/seqkit/releases/download/v2.5.0/seqkit_linux_amd64.tar.gz" | tar -C "${HOME}/bin" -xz "seqkit"
#
# Usage (NOTE: you must build and re-build Nextclade executable yourself, this script does not do that):
#
# 1. Download datasets from the default dataset server and run tests with a given nextclade executable:
#
#     ./tests/run-smoke-tests 'target/release/nextclade'
#
# 2. Run tests with a given nextclade executable and a directory containing datasets. Dataset directories are
#    identified as directories containing a `pathogen.json` file.
#
#     ./tests/run-smoke-tests 'target/release/nextclade' '.../nextclade_data/data_output'
#
# The downloaded datasets will be in $DATASETS_DIR and Nextclade output files will be in $RESULTS_DIR (see below)

export NEXTCLADE_BIN="${1:? "Usage: ${0} <path_to_nextclade> [path_to_dataset_collection_dir]"}"
export INPUT_DATASETS_DIR="${2:-}"

THIS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")";  pwd)
export THIS_DIR

export DATASETS_DIR="${THIS_DIR}/../tmp/smoke-tests/dataset"
export RESULTS_DIR="${THIS_DIR}/../tmp/smoke-tests/result"


function run_with_name() {
  set -o errtrace

  name="${1}"
  sequences="${2}"
  out_dir="${RESULTS_DIR}/${name}/with_name"

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --dataset-name="${name}" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_name


function run_with_dataset_dir() {
  set -o errtrace

  name="${1}"
  dataset_dir="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_dataset"

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-dataset="${dataset_dir}" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_dataset_dir


function run_with_dataset_zip() {
  name="${1}"
  zip_path="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_dataset_zip"

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-dataset="${zip_path}" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_dataset_zip


function run_with_ref_only() {
  name="${1}"
  dataset_dir="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_ref_only"

  if [ ! -f "${dataset_dir}/reference.fasta" ]; then return; fi

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-ref="${dataset_dir}/reference.fasta" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_ref_only


function run_with_ref_and_annotation() {
  name="${1}"
  dataset_dir="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_ref_and_annotation"

  if [ ! -f "${dataset_dir}/reference.fasta" ]; then return; fi
  if [ ! -f "${dataset_dir}/genome_annotation.gff3" ]; then return; fi

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-ref="${dataset_dir}/reference.fasta" \
    --input-annotation="${dataset_dir}/genome_annotation.gff3" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_ref_and_annotation


function run_with_ref_and_tree() {
  name="${1}"
  dataset_dir="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_ref_and_tree"

  if [ ! -f "${dataset_dir}/reference.fasta" ]; then return; fi
  if [ ! -f "${dataset_dir}/tree.json" ]; then return; fi

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-ref="${dataset_dir}/reference.fasta" \
    --input-tree="${dataset_dir}/tree.json" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_ref_and_tree


function run_with_ref_and_annotation_and_tree() {
  name="${1}"
  dataset_dir="${2}"
  sequences="${3}"
  out_dir="${RESULTS_DIR}/${name}/with_ref_and_annotation_and_tree"

  if [ ! -f "${dataset_dir}/genome_annotation.gff3" ]; then return; fi
  if [ ! -f "${dataset_dir}/tree.json" ]; then return; fi

  ${NEXTCLADE_BIN} run --quiet --retry-reverse-complement --in-order --include-reference \
    --input-ref="${dataset_dir}/reference.fasta" \
    --input-annotation="${dataset_dir}/genome_annotation.gff3" \
    --input-tree="${dataset_dir}/tree.json" \
    --output-translations="${out_dir}/translations/{cds}.translation.fasta" \
    --output-all="${out_dir}" \
    "${sequences}"
}
export -f run_with_ref_and_annotation_and_tree


function download_and_run_single_dataset() {
  set -o errtrace

  name=$1
  dataset_dir="${DATASETS_DIR}/dir/${name}"
  zip_path="${DATASETS_DIR}/zip/${name}/dataset.zip"

  ${NEXTCLADE_BIN} dataset get --name="${name}" --output-dir="$dataset_dir"

  ${NEXTCLADE_BIN} dataset get --name="${name}" --output-zip="$zip_path"

  sequences=$(jq -re ".files.examples | select(length > 0)" "$dataset_dir/pathogen.json")
  sequences="$dataset_dir/$sequences"
  msg_no_sequences=""
  if [ -z "${sequences}" ] || [ ! -f "$sequences" ]; then
    sequences="$dataset_dir/reference.fasta"
    msg_no_sequences="\n\e[93mWarning: dataset '${name}' contains no example sequences. Will use reference sequence as query input.\e[0m"
  fi

  if command -v seqkit &>/dev/null; then
    sequences_orig="${sequences%.fasta}.orig.fasta"
    sequences_rev_comp="${sequences%.fasta}.rev.fasta"
    cp "${sequences}" "${sequences_orig}"
    seqkit seq --quiet -t DNA -p -r "${sequences_orig}" | seqkit replace -p '(.*)' -r 'SMOKE_TEST_REVERSE_COMPLEMENTED_SEQUENCE|$1' > "${sequences_rev_comp}"
    (cat "${sequences_orig}"; echo; cat "${sequences_rev_comp}") > "${sequences}"
  fi

  echo -e "\nRunning '${NEXTCLADE_BIN}' for '${name}'$msg_no_sequences"

  run_with_name                           "${name}" "${sequences}"
  run_with_dataset_dir                    "${name}" "${dataset_dir}" "${sequences}"
  run_with_dataset_zip                    "${name}" "${zip_path}"    "${sequences}"
  run_with_ref_only                       "${name}" "${dataset_dir}" "${sequences}"
  run_with_ref_and_annotation             "${name}" "${dataset_dir}" "${sequences}"
  run_with_ref_and_tree                   "${name}" "${dataset_dir}" "${sequences}"
  run_with_ref_and_annotation_and_tree    "${name}" "${dataset_dir}" "${sequences}"
}
export -f download_and_run_single_dataset

all_datasets=$(${NEXTCLADE_BIN} dataset list --include-deprecated --only-names)
parallel --keep-order --jobs=+0 download_and_run_single_dataset ::: "${all_datasets}"
